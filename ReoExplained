PyDict is more than the traditional dictionary app...
It picks up something from everywhere: Artha, WordWeb, WordWeb Mobile, etc.
So, what does it end up being?
Something Nothing Else Can Be!

Define was customizable in many ways: colors, icons and more...
But PyDict goes beyond that! Way beyond that!
Let's see how!

Define, in the end, gives you ".gambas" file as executable and to be clear,
it cannot be modified as far as I know.
But PyDict has the advantage of being just an Executable Code file.
Its basically source code that just runs right away.
So, there's so much customization available, you wouldn't imagine it!

Not just that, PyDict's UI is made using Glade, making it EXTREMELY EASY to
make changes.

PyDict is YOUR Dictionary, not mine, not anybody else's.

Let's get to some basic customizations:

1) Similar Words:
        Similar words is actually more configurable than you might think.
        Being part of Dict, 'similar words' can be presented using different
        strategies.
        
        Strategies available:
         exact      Match headwords exactly
         prefix     Match prefixes
         nprefix    Match prefixes (skip, count)
         substring  Match substring occurring anywhere in a headword
         suffix     Match suffixes
         re         POSIX 1003.2 (modern) regular expressions
         regexp     Old (basic) regular expressions
         soundex    Match using SOUNDEX algorithm
         lev        Match headwords within Levenshtein distance one
         word       Match separate words within headwords
         first      Match the first word within headwords
         last       Match the last word within headwords
         
        'lev' is the default strategy.
        You can change this by changing the value of the 'strat'.
        Old: strat = "lev"
        Now: strat = "word" #just example. 'word' can be anything else too.
        
2) Color-Coding:
        Yup. You can change the colors that stuff are marked in.
        Just change the values of 'sencol' and 'wordcol' to your favorite colors.
        Old: sencol = "blue"
        Now: sencol = "yellow" #just example.
        
        This is markup. So, there's tons of possibilities.
        You could even use hex-codes of colors.
        Example: For grey,
                          sencol = "#aeaeae"
        And that works...
        
3) How about the Whole UI????
        Ok. This needs some work and time.

        Okay, the newer, safer (but not necessarily easier) method first:
        1) Install Glade (3.20 or higher). You need it for what we're about to do.
        2) Create your UI file (or create a copy of the original with a new file name)
        3) Go on, make your own UI.
        4) Link all the functions (you need not do this if you made yours based on the
           original UI file)
        5) Use <[pydict -g "/path/to/UI/file/"]> to run PyDict. Voila!

        Wanna do it the old way, why not?:
        1) Install Glade (3.20 or higher). You need it for what we're about to do.
        2) After installing Glade, open 'pydict.ui' using Glade.
        3) Glade is easy. Just keep a backup of the file and start messing around!
        
        WARNINGS & PRECAUTIONS:
        1) Backup the original file.
        2) All versions of Glade below 3.20 don't have support for CSDs, something
           PyDict uses heavily. So, you will mess everything up if you use versions
           below 3.20.
        3) Glade 3.20 itself has a bug that makes the main HeaderBar (CSD) invisible.
           However, you can modify it by selecting the HeaderBar in the Inspector
           and then, changing its settings. (THIS HAS BEEN FIXED IN NEWER BUILDS!)
